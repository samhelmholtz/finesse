/* 
 * File:   Semize.cpp
 * Author: sam
 * 
 * Created on April 24, 2015, 1:49 PM
 */

#include "Semize.h"
#include "DiscreteVectorBitwiseAndExecutorChunked.h"
#include "DiscreteVectorScalarProductCalculator.h"

Semize::Semize(int** dataMatrix, int** dataMatrixTransposed, int numDataMatrixRows, int numDataMatrixCols, int k, int numScaleElements) {
    this->dataMatrix = dataMatrix;
    this->dataMatrixTransposed = dataMatrixTransposed;
    this->n = numDataMatrixRows;
    this->m = numDataMatrixCols;
    this->k = k;
    this->numScaleElements = numScaleElements;
    int numBitsRequiredForVector = k * (numScaleElements - 1);
    int bitWidth = sizeof (unsigned long long)*8; // typically gives 64
    int numElementsRequiredToRepresentVectorInTotal = (numBitsRequiredForVector + bitWidth - 1) / bitWidth;
    int numNormalChunksIn128Bits = 128 / bitWidth; // usually gives 2
    int num128BitChunksRequiredForVector = numElementsRequiredToRepresentVectorInTotal / numNormalChunksIn128Bits;
    int numExtraChunksRequiredForVector = numElementsRequiredToRepresentVectorInTotal % numNormalChunksIn128Bits;
    IDiscreteVectorBitwiseAndExecutor* discreteVectorBitwiseAndExecutor = new DiscreteVectorBitwiseAndExecutorChunked(num128BitChunksRequiredForVector, numExtraChunksRequiredForVector);
    DiscreteVectorValueSetter* discreteVectorValueSetter = new DiscreteVectorValueSetter(k, numScaleElements);
    DiscreteVectorSupremumCalculator* discreteVectorSupremumCalculator = new DiscreteVectorSupremumCalculator(k, numScaleElements);
    DiscreteVectorScalarProductCalculator* discreteVectorScalarProductCalculator = new DiscreteVectorScalarProductCalculator(discreteVectorBitwiseAndExecutor, discreteVectorSupremumCalculator, k, numScaleElements);
    this->greedyCoverCalculator = new GreedyCoverCalculator(discreteVectorScalarProductCalculator, discreteVectorValueSetter, k, numScaleElements);


}

Semize::Semize(const Semize& orig) {
}

Semize::~Semize() {
}

