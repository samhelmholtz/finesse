/* 
 * File:   RandomizationRoundRunner.cpp
 * Author: sam
 * 
 * Created on April 30, 2015, 9:06 AM
 */

#include <limits>
#include <string.h>

#include "RandomizationRoundRunner.h"
#include "limits.h"
#include "Semize.h"
#include <iostream>


RandomizationRoundRunner::RandomizationRoundRunner(Semize* semize, int n, int m, int k) {
    this->semize = semize;
    this->n = n;
    this->m = m;
    this->k = k;
}

RandomizationRoundRunner::RandomizationRoundRunner(const RandomizationRoundRunner& orig) {
}

RandomizationRoundRunner::~RandomizationRoundRunner() {
}

void RandomizationRoundRunner::Run(int** usageMatrix, int** basisMatrixTransposed, double* objectiveMeasure, int numRandomizationRounds) {
    double bestMeasure = std::numeric_limits<double>::max();
    int** tempUsageMatrix = new int*[n];
    for (int i = 0; i < this->n; i++) {
        tempUsageMatrix[i] = new int[k];
    }
    int** tempBasisMatrixTransposed = new int*[m];
    for (int i = 0; i < this->m; i++) {
        tempBasisMatrixTransposed[i] = new int[k];
    }
    double tempObjectiveMeasure;

    for (int i = 0; i < numRandomizationRounds; i++) {
        this->semize->Run(tempUsageMatrix, tempBasisMatrixTransposed, &tempObjectiveMeasure);
        std::cout << "Iteration " << i << ": " << tempObjectiveMeasure;
        if (tempObjectiveMeasure < bestMeasure) {
            std::cout << " (best so far)";
            // Update best solutions
            for (int j = 0; j < this->n; j++) {
                memcpy(usageMatrix[j], tempUsageMatrix[j], sizeof(int)*this->k);
            }
            for (int j = 0; j < this->m; j++) {
                memcpy(basisMatrixTransposed[j], tempBasisMatrixTransposed[j], sizeof(int)*this->k);
            }
            *objectiveMeasure = tempObjectiveMeasure;
            bestMeasure = tempObjectiveMeasure;
        }
        std::cout << std::endl;
    }
    
    // Cleanup
    for (int i = 0; i < this->n; i++) {
        delete[] tempUsageMatrix[i];
    }
    delete[] tempUsageMatrix;
    for (int i = 0; i < this->m; i++) {
        delete[] tempBasisMatrixTransposed[i];
    }
    delete[] tempBasisMatrixTransposed;
}